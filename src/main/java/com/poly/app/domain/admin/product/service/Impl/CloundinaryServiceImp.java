package com.poly.app.domain.admin.product.service.Impl;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.poly.app.domain.admin.product.service.CloundinaryService;
import com.poly.app.domain.model.Image;
import com.poly.app.domain.repository.ImageRepository;
import com.poly.app.infrastructure.util.CloudinaryUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class CloundinaryServiceImp implements CloundinaryService {


    private final RestTemplate restTemplate;  // Inject RestTemplate t·ª´ Spring
    private final ImageRepository imageRepository;

    private static final String CLOUDINARY_URL = "https://api.cloudinary.com/v1_1/dieyhvcou/image/destroy";
    private static final String API_KEY = "526492658683127";  // Thay th·∫ø b·∫±ng API key th·ª±c t·∫ø c·ªßa b·∫°n

    /**
     * X√≥a ·∫£nh tr√™n Cloudinary b·∫±ng public_id.
     *
     * @param publicId ID c·ªßa ·∫£nh c·∫ßn x√≥a tr√™n Cloudinary.
     * @return ResponseEntity ch·ª©a ph·∫£n h·ªìi t·ª´ Cloudinary.
     */
    @Override
    public ResponseEntity<?> deleteImage(String publicId) {
        if (publicId == null || publicId.isEmpty()) {
            return ResponseEntity.badRequest().body("public_id is required");
        }

        // L·∫•y timestamp hi·ªán t·∫°i (t√≠nh b·∫±ng gi√¢y)
        String timestamp = String.valueOf(System.currentTimeMillis() / 1000);

        // T·∫°o danh s√°ch tham s·ªë ƒë·ªÉ k√Ω signature
        Map<String, String> params = new HashMap<>();
        params.put("public_id", publicId);
        params.put("timestamp", timestamp);

        // K√Ω signature b·∫±ng CloudinaryUtil
        String signature = CloudinaryUtil.generateSignature(params);

        // T·∫°o request body ƒë·ªÉ g·ª≠i ƒë·∫øn Cloudinary
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("public_id", publicId);
        requestBody.put("api_key", API_KEY);
        requestBody.put("timestamp", timestamp);
        requestBody.put("signature", signature);

        try {
            // G·ª≠i y√™u c·∫ßu DELETE ƒë·∫øn Cloudinary
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<Map> response = restTemplate.postForEntity(CLOUDINARY_URL, requestBody, Map.class);

            log.info("X√≥a ·∫£nh th√†nh c√¥ng: {}", publicId);

            try {
                List<Image> images = imageRepository.getImageByPublicId(publicId);
                if (images.isEmpty()) {
                    log.info("chua co image nay");

                }
                images.forEach(image -> {
                    log.info(image.toString());
                    imageRepository.deleteById(image.getId());
                });
            } catch (Exception e) {
                log.info("L·ªói x·∫£y ra: " + e.getMessage());
            }


            return ResponseEntity.ok(response.getBody());
        } catch (Exception e) {
            log.error("L·ªói khi x√≥a ·∫£nh {}: {}", publicId, e.getMessage());
            return ResponseEntity.internalServerError().body("L·ªói khi x√≥a ·∫£nh: " + e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> deleteImageAndUpdateDB(String publicId, int productId, int colorId) {
        if (publicId == null || publicId.isEmpty()) {
            return ResponseEntity.badRequest().body("{\"error\": \"public_id is required\"}");
        }

        try {
            // Ki·ªÉm tra xem ·∫£nh c√≥ thu·ªôc nhi·ªÅu m√†u kh√¥ng
            boolean isSharedImage = imageRepository.countDistinctColorsByPublicId(publicId) > 1;

            if (!isSharedImage) {
                // X√≥a tr√™n Cloudinary n·∫øu ·∫£nh ch·ªâ thu·ªôc m·ªôt m√†u
                String timestamp = String.valueOf(System.currentTimeMillis() / 1000);

                Map<String, String> params = new HashMap<>();
                params.put("public_id", publicId);
                params.put("timestamp", timestamp);
                String signature = CloudinaryUtil.generateSignature(params);

                Map<String, String> requestBody = new HashMap<>();
                requestBody.put("public_id", publicId);
                requestBody.put("api_key", API_KEY);
                requestBody.put("timestamp", timestamp);
                requestBody.put("signature", signature);

                ResponseEntity<Map> response = restTemplate.postForEntity(CLOUDINARY_URL, requestBody, Map.class);

                if (!response.getStatusCode().is2xxSuccessful()) {
                    log.error("‚ùå L·ªói khi x√≥a ·∫£nh tr√™n Cloudinary: {}", response.getBody());
                    return ResponseEntity.internalServerError().body("{\"error\": \"L·ªói khi x√≥a ·∫£nh tr√™n Cloudinary\"}");
                }

                log.info("‚úÖ X√≥a ·∫£nh th√†nh c√¥ng tr√™n Cloudinary: {}", publicId);
            }

            // X√≥a ·∫£nh ƒë√∫ng trong DB
            List<Image> imagesToDelete = imageRepository.findPublicIdsByProductIdAndColorId(productId, colorId)
                    .stream()
                    .filter(image -> image.getPublicId().equals(publicId)) // Ch·ªâ x√≥a ·∫£nh c√≥ `publicId` c·∫ßn x√≥a
                    .toList();

            if (imagesToDelete.isEmpty()) {
                log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh trong DB ƒë·ªÉ x√≥a v·ªõi publicId: {}, productId: {}, colorId: {}", publicId, productId, colorId);
            } else {
                imagesToDelete.forEach(image -> {
                    log.info("üóë X√≥a ·∫£nh trong DB: {}", image.getId());
                    imageRepository.deleteById(image.getId());
                });
            }

            return ResponseEntity.ok("{\"message\": \"thanh cong\"}");

        } catch (Exception e) {
            log.error("üö® L·ªói khi x·ª≠ l√Ω x√≥a ·∫£nh {}: {}", publicId, e.getMessage());
            return ResponseEntity.internalServerError().body("{\"error\": \"L·ªói khi x·ª≠ l√Ω x√≥a ·∫£nh\"}");
        }
    }



}
